@model List<Hillarys_Pizzeria_Project.Models.MenuItem>
@using Hillarys_Pizzeria_Project.Controllers;


<a class="nav-link text-dark" asp-area="" asp-controller="Menu" asp-action="Index">Back to Menu</a>


@{
    // NOTE: This page contains two pages overall, one for the customization of pizzas, and one for
    //  the customization of drinks.
    //
    //
    //General variables for the page as a whole

    MenuItem selectedItem = Model.Last<MenuItem>();
    List<MenuItem> customizationOptions = new List<MenuItem>();
    MenuType type; //This will determine which version of the page to generate

    foreach (MenuItem item in Model)
    {
        if (item != selectedItem)
        {
            customizationOptions.Add(item);
        }
    }


    //for (var i = 0; i < Model.Count() - 1; i++)
    //{
    //    //customizationOptions.Add(Model[i]);
    //    customizationOptions[i] = Model[i];
    //}

    if (100 <= selectedItem.food_id & selectedItem.food_id <= 199)
    {
        type = MenuType.PizzaCustomization;
    }
    else
    {
        type = MenuType.BeverageSizes;
    }
    //END General variable for the page as a whole
}

@{
    switch (type)
    {
        case MenuType.PizzaCustomization: //This generates the view for customizing a pizza

            <h1>PIZZA PAGE</h1>

            <p>
                Customizing: @selectedItem.food_name
                Base drink size: $@selectedItem.price
            </p>

            if (CustomizePizza.toppingsCount > 0)
            {
                <p>Current selected toppings:</p>
                foreach (MenuItem item in CustomizePizza.toppings)
                {
                    <p>
                        @item.food_name : + $@item.price
                    </p>
                }
            }

            //Displays current selected size, if selected
            if (CustomizePizza.isSizeSelected) 
            {
                <p>
                    Current selected size: @CustomizePizza.selectedSize.food_name
                </p>
                <br />
            }
            //Displays current selected crust, if selected
            else if (CustomizePizza.isCrustSelected)
            {
                <p>
                    Current selected crust: @CustomizePizza.selectedCrust.food_name
                </p>
                <br />
            }

            //Toppings selection section
            <p>
                Toppings Selection:
                Toppings left: @(4 - CustomizePizza.toppingsCount)
            </p>
            if (!(CustomizePizza.toppingsCount < 4))
            {
                <p>You have reached your max topping.</p>
            }
            @Html.ActionLink("Reset Topping Selection", "ResetToppingSelection", new {selectedItemID = selectedItem.food_id})
            foreach (MenuItem item in customizationOptions)
            {
                if (100 <= item.food_id & item.food_id <= 199)
                {
                    decimal price = selectedItem.price + item.price;
                
                    <p>
                        @item.food_name : + $@price
                    </p>
                    @Html.ActionLink("Add this topping", "AddPizzaTopping", new {toppingID = item.food_id, selectedItemID = selectedItem.food_id})
                }
            }

            //Size selection section
            <p>Size Selection:</p>
            foreach (MenuItem item in customizationOptions)
            {
                if (200 <= item.food_id & item.food_id <= 299)
                {
                    decimal price = selectedItem.price + item.price;
                
                    <p>
                        @item.food_name : + $@price
                    </p>
                    @Html.ActionLink("Select this size", "SetPizzaSize", new {sizeID = item.food_id, selectedItemID = selectedItem.food_id})
                }
            }

            //crust selection section
            <p>Crust Selection:</p>
            foreach (MenuItem item in customizationOptions)
            {
                if (300 <= item.food_id & item.food_id <= 399)
                {
                    decimal price = selectedItem.price + item.price;
                
                    <p>
                        @item.food_name : + $@price
                    </p>
                    @Html.ActionLink("Select this crust", "SetPizzaCrust", new {crustID = item.food_id, selectedItemID = selectedItem.food_id})
                }
            }

            <br />
            <br />
            if (CustomizePizza.isSizeSelected & CustomizePizza.isCrustSelected)
            {
                @Html.ActionLink("Add to Cart", "AddToCart", new {selectedItemID = selectedItem.food_id, menu = MenuType.PizzaCustomization})
            }
            else
            {
                <p>
                    Please select a size and a crust before adding to the cart.
                </p>
            }

            break;

        case MenuType.BeverageSizes: //This generates the view for customizing a drink

            <h1>DRINK PAGE</h1>

            <p>
                Select a size for: @selectedItem.food_name
                Base drink price: $@selectedItem.price
            </p>
            <br />

            //Displays currently selected size, if selected
            if (CustomizeDrink.isSizeSelected)
            {
                <p>
                    Current selected size: @CustomizeDrink.selectedSize.food_name
                </p>
                <br />
            }

            //Size selection section
            <p>Size Selection:</p>
            foreach (MenuItem item in customizationOptions)
            {
                decimal price = selectedItem.price + item.price;
                
                <p>
                    @item.food_name : + $@price
                </p>
                @Html.ActionLink("Select this size", "SelectSize", new {sizeID = item.food_id, selectedItemID = selectedItem.food_id})
            }

            <br />
            if (CustomizeDrink.isSizeSelected)
            {
                @Html.ActionLink("Add to Cart", "AddToCart", new {selectedItemID = selectedItem.food_id, menu = MenuType.BeverageSizes})
            }
            break;

        default: //This default will catch any errors pertaining to not loading correctly
            <p>
                You should not be here, something has broken.
            </p>
            break;
    }
}












<!-- Below is old -->
@*<p>Number of options select: @BuildYourOwnCart.contents.Count()</p>

@{
    if (BuildYourOwnCart.IsNotEmpty())
    {
        <p>Current options selected:</p>
        foreach(MenuItem item in BuildYourOwnCart.contents)
        {
            <p>
            @item.food_name
            </p>
            <br />
        }
        <br />
    }
}

@{
    foreach (var item in Model)
    {
        <p>
        @item.food_id @item.food_name @item.description @item.price
        </p>
        @Html.ActionLink("Add Option", "AddToBuildYourOwnCart", new { targetFoodID = item.food_id})
        @Html.ActionLink("Test Add", "AddToCart", new { food_id = item.food_id, menu = MenuType.Custom})
    <br />
    }
}

@{
    if (BuildYourOwnCart.IsNotEmpty())
    {
       <a class="nav-link text-dark" asp-area="" asp-controller="Menu" asp-action="CreateBuildYourOwn">Add to Cart</a>
    }
}*@